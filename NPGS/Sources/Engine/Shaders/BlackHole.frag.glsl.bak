const float kPi              = 3.141592653589;
const float kGravityConstant = 6.673e-11;
const float kSpeedOfLight    = 299792458.0;
const float sigma            = 5.670373e-8;
const float LightYear        = 9460730472580800.0;
const float SolarMass        = 1.9884e30;

float RandomStep(vec2 Input, float Seed)
{
    return fract(sin(dot(Input + fract(11.4514 * sin(Seed)), vec2(12.9898, 78.233))) * 43758.5453);
}

float CubicInterpolate(float x)
{
    return 3.0 * x * x - 2.0 * x * x * x;
}

float PerlinNoise(vec3 Position)
{
    vec3 PosInt   = floor(Position);
    vec3 PosFloat = fract(Position);

    float v000 = 2.0 * fract(sin(dot(vec3(PosInt.x, PosInt.y, PosInt.z), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v100 = 2.0 * fract(sin(dot(vec3(PosInt.x + 1.0, PosInt.y, PosInt.z), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v010 = 2.0 * fract(sin(dot(vec3(PosInt.x, PosInt.y + 1.0, PosInt.z), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v110 = 2.0 * fract(sin(dot(vec3(PosInt.x + 1.0, PosInt.y + 1.0, PosInt.z), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v001 = 2.0 * fract(sin(dot(vec3(PosInt.x, PosInt.y, PosInt.z + 1.0), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v101 = 2.0 * fract(sin(dot(vec3(PosInt.x + 1.0, PosInt.y, PosInt.z + 1.0), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v011 = 2.0 * fract(sin(dot(vec3(PosInt.x, PosInt.y + 1.0, PosInt.z + 1.0), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;
    float v111 = 2.0 * fract(sin(dot(vec3(PosInt.x + 1.0, PosInt.y + 1.0, PosInt.z + 1.0), vec3(12.9898, 78.233, 213.765))) * 43758.5453) - 1.0;

    float v00 = v001 * CubicInterpolate(PosFloat.z) + v000 * CubicInterpolate(1.0 - PosFloat.z);
    float v10 = v101 * CubicInterpolate(PosFloat.z) + v100 * CubicInterpolate(1.0 - PosFloat.z);
    float v01 = v011 * CubicInterpolate(PosFloat.z) + v010 * CubicInterpolate(1.0 - PosFloat.z);
    float v11 = v111 * CubicInterpolate(PosFloat.z) + v110 * CubicInterpolate(1.0 - PosFloat.z);
    float v0  = v01 * CubicInterpolate(PosFloat.y) + v00 * CubicInterpolate(1.0 - PosFloat.y);
    float v1  = v11 * CubicInterpolate(PosFloat.y) + v10 * CubicInterpolate(1.0 - PosFloat.y);

    return v1 * CubicInterpolate(PosFloat.x) + v0 * CubicInterpolate(1.0 - PosFloat.x);
}

float SoftSaturate(float x)
{
    return 1.0 - 1.0 / (max(x, 0.0) + 1.0);
}

float GenerateAccretionDiskNoise(vec3 Position, int NoiseStartLevel, int NoiseEndLevel, float ContrastLevel)
{
    float NoiseAccumulator = 10.0;
    float NoiseFrequency   = 1.0;

    for (int Level = NoiseStartLevel; Level < NoiseEndLevel; ++Level)
    {
        NoiseFrequency      = pow(3.0, float(Level));
        vec3 ScaledPosition = vec3(NoiseFrequency * Position.x, NoiseFrequency * Position.y, NoiseFrequency * Position.z);

        NoiseAccumulator *= (1.0 + 0.1 * PerlinNoise(ScaledPosition));
    }

    return log(1.0 + pow(0.1 * NoiseAccumulator, ContrastLevel));
}

float Vec2ToTheta(vec2 v1, vec2 v2)
{
    if (dot(v1, v2) > 0.0)
    {
        return asin(0.999999 * (v1.x * v2.y - v1.y * v2.x) / length(v1) / length(v2));
    }
    else if (dot(v1, v2) < 0.0 && (-v1.x * v2.y + v1.y * v2.x) < 0.0)
    {
        return kPi - asin(0.999999 * (v1.x * v2.y - v1.y * v2.x) / length(v1) / length(v2));
    }
    else if (dot(v1, v2) < 0.0 && (-v1.x * v2.y + v1.y * v2.x) > 0.0)
    {
        return -kPi - asin(0.999999 * (v1.x * v2.y - v1.y * v2.x) / length(v1) / length(v2));
    }
}

vec3 KelvinToRgb(float Kelvin)
{
    if (Kelvin < 400.01)
    {
        return vec3(0.0);
    }

    float Teff     = (Kelvin - 6500.0) / (6500.0 * Kelvin * 2.2);
    vec3  RgbColor = vec3(0.0);

    RgbColor.r = exp(2.05539304e4 * Teff);
    RgbColor.g = exp(2.63463675e4 * Teff);
    RgbColor.b = exp(3.30145739e4 * Teff);

    float BrightnessScale = 1.0 / max(max(RgbColor.r, RgbColor.g), RgbColor.b);

    if (Kelvin < 1000.0)
    {
        BrightnessScale *= (Kelvin - 400.0) / 600.0;
    }

    RgbColor *= BrightnessScale;
    return RgbColor;
}

float GetKeplerianAngularVelocity(float Radius, float SchwarzschildRadius)
{
    return sqrt(kSpeedOfLight / LightYear * kSpeedOfLight * SchwarzschildRadius / LightYear / ((2.0 * Radius - 3.0 * SchwarzschildRadius) * Radius * Radius));
}

vec3 WorldToBlackHoleSpace(vec4 Position, vec3 BlackHolePos, vec3 DiskNormal)
{
    vec3 WorldUp = vec3(0.0, 0.0, 1.0);
    if (DiskNormal == WorldUp)
    {
        DiskNormal += 0.0001 * vec3(1.0, 0.0, 0.0);
    }

    vec3 BlackHoleSpaceX = normalize(cross(WorldUp, DiskNormal));
    vec3 BlackHoleSpaceY = normalize(cross(DiskNormal, BlackHoleSpaceX));
    vec3 BlackHoleSpaceZ = normalize(DiskNormal);

    mat4x4 Translate = mat4x4(1.0, 0.0, 0.0, -BlackHolePos.x, 0.0, 1.0, 0.0, -BlackHolePos.y, 0.0, 0.0, 1.0, -BlackHolePos.z, 0.0, 0.0, 0.0, 1.0);

    mat4x4 Rotate = mat4x4(BlackHoleSpaceX.x, BlackHoleSpaceX.y, BlackHoleSpaceX.z, 0.0, BlackHoleSpaceY.x, BlackHoleSpaceY.y, BlackHoleSpaceY.z, 0.0, BlackHoleSpaceZ.x, BlackHoleSpaceZ.y, BlackHoleSpaceZ.z, 0.0, 0.0, 0.0, 0.0, 1.0);

    Position = transpose(Translate) * Position;
    Position = transpose(Rotate) * Position;
    return Position.xyz;
}

vec3 ApplyBlackHoleRotation(vec4 Position, vec3 BlackHolePos, vec3 DiskNormal)
{
    vec3 WorldUp = vec3(0.0, 0.0, 1.0);
    if (DiskNormal == WorldUp)
    {
        DiskNormal += 0.0001 * vec3(1.0, 0.0, 0.0);
    }

    vec3 BlackHoleSpaceX = normalize(cross(WorldUp, DiskNormal));
    vec3 BlackHoleSpaceY = normalize(cross(DiskNormal, BlackHoleSpaceX));
    vec3 BlackHoleSpaceZ = normalize(DiskNormal);

    mat4x4 Rotate = mat4x4(BlackHoleSpaceX.x, BlackHoleSpaceX.y, BlackHoleSpaceX.z, 0.0, BlackHoleSpaceY.x, BlackHoleSpaceY.y, BlackHoleSpaceY.z, 0.0, BlackHoleSpaceZ.x, BlackHoleSpaceZ.y, BlackHoleSpaceZ.z, 0.0, 0.0, 0.0, 0.0, 1.0);

    Position = transpose(Rotate) * Position;
    return Position.xyz;
}

vec4 GetCamera(vec4 Position)  // 相机系平移旋转  本部分在实际使用时uniform输入
{
    float Theta = 4.0 * kPi * iMouse.x / iResolution.x;
    float Phi   = 0.999 * kPi * iMouse.y / iResolution.y + 0.0005;
    float R     = 0.000057;

    if (iFrame < 2)
    {
        Theta = 4.0 * kPi * 0.45;
        Phi   = 0.999 * kPi * 0.55 + 0.0005;
    }
    if (texelFetch(iChannel0, ivec2(83, 0), 0).x > 0.)
    {
        R = 0.000097;
    }
    if (texelFetch(iChannel0, ivec2(87, 0), 0).x > 0.)
    {
        R = 0.000017;
    }
    vec3 Rotcen = vec3(0.0, 0.0, 0.0);

    vec3 Campos;

    vec3 reposcam = vec3(R * sin(Phi) * cos(Theta), R * sin(Phi) * sin(Theta), -R * cos(Phi));

    Campos    = Rotcen + reposcam;
    vec3 vecz = vec3(0.0, 0.0, 1.0);

    vec3 X = normalize(cross(vecz, reposcam));
    vec3 Y = normalize(cross(reposcam, X));
    vec3 Z = normalize(reposcam);

    Position = (transpose(mat4x4(1., 0., 0., -Campos.x, 0., 1., 0., -Campos.y, 0., 0., 1., -Campos.z, 0., 0., 0., 1.)) * Position);

    Position = transpose(mat4x4(X.x, X.y, X.z, 0., Y.x, Y.y, Y.z, 0., Z.x, Z.y, Z.z, 0., 0., 0., 0., 1.)) * Position;

    return Position;
}

vec4 GetCameraRot(vec4 Position)  // 摄影机系旋转    本部分在实际使用时uniform输入
{
    float Theta = 4.0 * kPi * iMouse.x / iResolution.x;
    float Phi   = 0.999 * kPi * iMouse.y / iResolution.y + 0.0005;
    float R     = 0.000057;

    if (iFrame < 2)
    {
        Theta = 4.0 * kPi * 0.45;
        Phi   = 0.999 * kPi * 0.55 + 0.0005;
    }
    if (texelFetch(iChannel0, ivec2(83, 0), 0).x > 0.)
    {
        R = 0.000097;
    }
    if (texelFetch(iChannel0, ivec2(87, 0), 0).x > 0.)
    {
        R = 0.000017;
    }
    vec3 Rotcen = vec3(0.0, 0.0, 0.0);

    vec3 Campos;

    vec3 reposcam = vec3(R * sin(Phi) * cos(Theta), R * sin(Phi) * sin(Theta), -R * cos(Phi));

    Campos    = Rotcen + reposcam;
    vec3 vecz = vec3(0.0, 0.0, 1.0);

    vec3 X = normalize(cross(vecz, reposcam));
    vec3 Y = normalize(cross(reposcam, X));
    vec3 Z = normalize(reposcam);

    Position = transpose(mat4x4(X.x, X.y, X.z, 0., Y.x, Y.y, Y.z, 0., Z.x, Z.y, Z.z, 0., 0., 0., 0., 1.)) * Position;
    return Position;
}

vec3 FragUvToDir(vec2 FragUv, float Fov)
{
    return normalize(vec3(Fov * (2.0 * FragUv.x - 1.0), Fov * (2.0 * FragUv.y - 1.0) * iResolution.y / iResolution.x, -1.0));
}

vec2 PosToNdc(vec4 Pos)
{
    return vec2(-Pos.x / Pos.z, -Pos.y / Pos.z * iResolution.x / iResolution.y);
}

vec2 DirToNdc(vec3 Dir)
{
    return vec2(-Dir.x / Dir.z, -Dir.y / Dir.z * iResolution.x / iResolution.y);
}

vec2 DirToFragUv(vec3 Dir)
{
    return vec2(0.5 - 0.5 * Dir.x / Dir.z, 0.5 - 0.5 * Dir.y / Dir.z * iResolution.x / iResolution.y);
}

vec2 PosToFragUv(vec4 Pos)
{
    return vec2(0.5 - 0.5 * Pos.x / Pos.z, 0.5 - 0.5 * Pos.y / Pos.z * iResolution.x / iResolution.y);
}

float Shape(float x, float Alpha, float Beta)
{
    float k = pow(Alpha + Beta, Alpha + Beta) / (pow(Alpha, Alpha) * pow(Beta, Beta));
    return k * pow(x, Alpha) * pow(1.0 - x, Beta);
}

vec4 DiskColor(vec4 BaseColor, float TimeRate, float StepLength, vec3 RayPos, vec3 LastRayPos, vec3 RayDir, vec3 LastRayDir, vec3 WorldZ, vec3 BlackHolePos, vec3 DiskNormal, float Rs, float RIn, float ROut, float DiskA, float TPeak4, float ShiftMax)
{
    vec3 CamOnDisk  = WorldToBlackHoleSpace(vec4(0., 0., 0., 1.0), BlackHolePos, DiskNormal);  // 黑洞系下相机位置
    vec3 References = ApplyBlackHoleRotation(vec4(WorldZ, 1.0), BlackHolePos, DiskNormal);     // 用于吸积盘角度零点确定
    vec3 PosOnDisk  = WorldToBlackHoleSpace(vec4(RayPos, 1.0), BlackHolePos, DiskNormal);      // 光线黑洞系下位置
    vec3 DirOnDisk  = ApplyBlackHoleRotation(vec4(RayDir, 1.0), BlackHolePos, DiskNormal);     // 光线黑洞系下方向

    // 此行以下在黑洞坐标系

    float PosR = length(PosOnDisk.xy);
    float PosZ = PosOnDisk.z;

    vec4 Color = vec4(0.);
    if (abs(PosZ) < 0.5 * Rs && PosR < ROut && PosR > RIn)
    {
        float EffR = 1.0 - ((PosR - RIn) / (ROut - RIn) * 0.5);
        if ((ROut - RIn) > 9.0 * Rs)
        {  // 这个if用于大外径盘的厚度控制
            if (PosR < 5.0 * Rs + RIn)
            {
                EffR = 1.0 - ((PosR - RIn) / (9.0 * Rs) * 0.5);
            }
            else
            {
                EffR = 1.0 - (0.5 / 0.9 * 0.5 + ((PosR - RIn) / (ROut - RIn) - 5. * Rs / (ROut - RIn)) / (1. - 5. * Rs / (ROut - RIn)) * 0.5);
            }
        }

        if ((abs(PosZ) < 0.5 * Rs * Shape(EffR, 4.0, 0.9)) || (PosZ < 0.5 * Rs * (1. - 5. * pow(2. * (1. - EffR), 2.))))
        {
            float Omega0 = GetKeplerianAngularVelocity(PosR, Rs);

            // 本部分应挪出raymarching部分提前计算（待办
            float HalfPiTimeInside = kPi / GetKeplerianAngularVelocity(3.0 * Rs, Rs);
            float EffTime0         = fract(iTime * TimeRate / (HalfPiTimeInside)) * HalfPiTimeInside + 0. * HalfPiTimeInside;  // 所有成对出现01结尾的变量,都是用于两个吸积盘叠变防止过度缠绕
            float EffTime1         = fract(iTime * TimeRate / (HalfPiTimeInside) + 0.5) * HalfPiTimeInside + 1. * HalfPiTimeInside;
            float Ntime0           = trunc(iTime * TimeRate / (HalfPiTimeInside));
            float Ntime1           = trunc(iTime * TimeRate / (HalfPiTimeInside) + 0.5);
            float Phase0           = 2.0 * kPi * fract(43758.5453 * sin(Ntime0));  // 角度随机用于防止快倍率下过渡出现明显周期重复
            float Phase1           = 2.0 * kPi * fract(43758.5453 * sin(Ntime1));

            float PosThetaWithoutTime = Vec2ToTheta(PosOnDisk.xy, References.xy);
            float PosTheta            = fract((PosThetaWithoutTime + Omega0 * EffTime0 + Phase0) / 2. / kPi) * 2. * kPi;

            // 计算盘温度
            float T = pow(DiskA * Rs * Rs * Rs / (PosR * PosR * PosR) * max(1.0 - sqrt(RIn / PosR), 0.000001), 0.25);
            // 计算云相对速度
            vec3  v   = LightYear / kSpeedOfLight * Omega0 * cross(vec3(0., 0., 1.), PosOnDisk);
            float vre = dot(-DirOnDisk, v);
            // 计算多普勒因子
            float Dopler = sqrt((1.0 + vre) / (1.0 - vre));
            // 总红移量,含多普勒因子和引力红移和
            float RedShift = Dopler * sqrt(max(1.0 - Rs / PosR, 0.000001)) / sqrt(max(1.0 - Rs / length(CamOnDisk), 0.000001));

            float Rho;
            float Thick;
            float Vmix;
            vec4  Color0 = vec4(0.);
            vec4  Color1 = vec4(0.);
            float Distcol;
            {
                Rho = Shape(EffR, 4.0, 0.9);
                if (abs(PosZ) < 0.5 * Rs * Rho)
                {
                    Thick = 0.5 * Rs * Rho * (0.4 + 0.6 * SoftSaturate(GenerateAccretionDiskNoise(vec3(1.5 * PosTheta, PosR / Rs, 1.0), 1, 3, 80.0)));  // 盘厚
                    Vmix  = max(0., (1.0 - abs(PosZ) / Thick));
                    Rho *= 0.7 * Vmix * Rho;
                    Color0 = vec4(GenerateAccretionDiskNoise(vec3(1. * PosR / Rs, 1. * PosZ / Rs, .5 * PosTheta), 3, 6, 80.0));  // 云本体
                    Color0.xyz *= Rho * 1.4 * (0.2 + 0.8 * Vmix + (0.8 - 0.8 * Vmix) * GenerateAccretionDiskNoise(vec3(PosR / Rs, 1.5 * PosTheta, PosZ / Rs), 1, 3, 80.0));
                    Color0.a *= (Rho);  //*(1.0+Vmix);
                }
                if (abs(PosZ) < 0.5 * Rs * (1. - 5. * pow(2. * (1. - EffR), 2.)))
                {
                    Distcol = max(1. - pow(PosZ / (0.5 * Rs * max(1. - 5. * pow(2. * (1. - EffR), 2.), 0.0001)), 2.), 0.) * GenerateAccretionDiskNoise(vec3(1.5 * fract((1.5 * PosThetaWithoutTime + kPi / HalfPiTimeInside * EffTime0 + Phase0) / 2. / kPi) * 2. * kPi, PosR / Rs, PosZ / Rs), 0, 6, 80.0);
                    Color0 += 0.02 * vec4(vec3(Distcol), 0.2 * Distcol) * sqrt(1.0001 - DirOnDisk.z * DirOnDisk.z) * min(1., Dopler * Dopler);
                }
                Color0 *= 0.5 - 0.5 * cos(2. * kPi * fract(iTime * TimeRate / (HalfPiTimeInside)));  // 用于过渡
            }

            PosTheta = fract((PosThetaWithoutTime + Omega0 * EffTime1 + Phase1) / (2. * kPi)) * 2. * kPi;  // 更新相位

            {
                Rho = Shape(EffR, 4.0, 0.9);  // 同上
                if (abs(PosZ) < 0.5 * Rs * Rho)
                {
                    Thick = 0.5 * Rs * Rho * (0.4 + 0.6 * SoftSaturate(GenerateAccretionDiskNoise(vec3(1.5 * PosTheta, PosR / Rs, 1.0), 1, 3, 80.0)));
                    Vmix  = max(0., (1.0 - abs(PosZ) / Thick));
                    Rho *= 0.7 * Vmix * Rho;
                    Color1 = vec4(GenerateAccretionDiskNoise(vec3(1. * PosR / Rs, 1. * PosZ / Rs, .5 * PosTheta), 3, 6, 80.0));
                    Color1.xyz *= Rho * 1.4 * (0.2 + 0.8 * Vmix + (0.8 - 0.8 * Vmix) * GenerateAccretionDiskNoise(vec3(PosR / Rs, 1.5 * PosTheta, PosZ / Rs), 1, 3, 80.0));
                    Color1.a *= (Rho);  //*(1.0+Vmix);
                }
                if (abs(PosZ) < 0.5 * Rs * (1. - 5. * pow(2. * (1. - EffR), 2.)))
                {
                    Distcol = max(1. - pow(PosZ / (0.5 * Rs * max(1. - 5. * pow(2. * (1. - EffR), 2.), 0.0001)), 2.), 0.) * GenerateAccretionDiskNoise(vec3(1.5 * fract((1.5 * PosThetaWithoutTime + kPi / HalfPiTimeInside * EffTime1 + Phase1) / 2. / kPi) * 2. * kPi, PosR / Rs, PosZ / Rs), 0, 6, 80.0);
                    Color1 += 0.02 * vec4(vec3(Distcol), 0.2 * Distcol) * sqrt(1.0001 - DirOnDisk.z * DirOnDisk.z) * min(1., Dopler * Dopler);
                }
                Color1 *= 0.5 - 0.5 * cos(2. * kPi * fract(iTime * TimeRate / (HalfPiTimeInside) + 0.5));
            }

            Color = Color1 + Color0;
            Color *= 1.0 + 20. * exp(-10. * (PosR - RIn) / (ROut - RIn));  // 内侧增加密度
            // xyz亮度*密度  a密度

            float BrightWithoutRedshift = 4.5 * T * T * T * T / TPeak4;  // 原亮度
            if (T > 1000.0)
            {
                T = max(1000.0, T * RedShift * Dopler * Dopler);
            }
            // 物理上严格的红移*多普勒高饱和度修正

            T = min(100000.0, T);

            Color.xyz *= BrightWithoutRedshift * min(1., 1.8 * (ROut - PosR) / (ROut - RIn)) * KelvinToRgb(T / exp((PosR - RIn) / (0.6 * (ROut - RIn))));
            // 原始亮度*修正颜色(给温度乘一个指数下降,避免颜色过于单调)

            Color.xyz *= min(ShiftMax, RedShift) * min(ShiftMax, Dopler);
            // 原亮度修正*多普勒高对比度修正

            Color.xyz *= pow((1.0 - (1.0 - min(1., RedShift)) * (PosR - RIn) / (ROut - RIn)),
                             9.);                                                                            // 缝一个和红移与半径均有关的函数,使左右两侧的亮度下降不均,增加不对称性
            Color.xyz *= min(1., 1. + 0.5 * ((PosR - RIn) / RIn + RIn / (PosR - RIn)) - max(1., RedShift));  // 乘一个对勾函数,降低吸积盘中间部分的亮度,避免糊成一坨白色

            // 步长积累
            Color.xyz *= StepLength / Rs;
            Color.a *= StepLength / Rs;
        }
    }

    return BaseColor + Color * (1.0 - BaseColor.a);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    fragColor      = vec4(0., 0., 0., 0.);
    vec2  FragUv   = fragCoord / iResolution.xy;
    float Fov      = 0.5;
    float TimeRate = 30.;  // 本部分在实际使用时又uniform输入，此外所有iTime*TimeRate应替换为游戏内时间。

    float MBlackHole = 1.49e7;                                                                          // 单位是太阳质量 本部分在实际使用时uniform输入
    float a0         = 0.0;                                                                             // 无量纲自旋系数 本部分在实际使用时uniform输入
    float Rs         = 2. * MBlackHole * kGravityConstant / kSpeedOfLight / kSpeedOfLight * SolarMass;  // 单位是米 本部分在实际使用时uniform输入

    float z1       = 1. + pow(1. - a0 * a0, 0.333333333333333) * (pow(1. + a0 * a0, 0.333333333333333) + pow(1. - a0, 0.333333333333333));  // 辅助变量      本部分在实际使用时uniform输入
    float RmsRatio = (3. + sqrt(3. * a0 * a0 + z1 * z1) - sqrt((3. - z1) * (3. + z1 + 2. * sqrt(3. * a0 * a0 + z1 * z1)))) / 2.;            // 赤道顺行最内稳定圆轨与Rs之比    本部分在实际使用时uniform输入
    float AccEff   = sqrt(1. - 1. / RmsRatio);                                                                                              // 吸积放能效率,以落到Rms为准 本部分在实际使用时uniform输入

    float mu      = 1.;                                                                            // 吸积物的比荷的倒数,氕为1 本部分在实际使用时uniform输入
    float dmdtEdd = 6.327 * mu / kSpeedOfLight / kSpeedOfLight * MBlackHole * SolarMass / AccEff;  // 爱丁顿吸积率 本部分在实际使用时uniform输入

    float dmdt = (2e-6) * dmdtEdd;  // 吸积率 本部分在实际使用时uniform输入

    float diskA = 3. * kGravityConstant * SolarMass / Rs / Rs / Rs * MBlackHole * dmdt / (8. * kPi * sigma);  // 吸积盘温度系数 本部分在实际使用时uniform输入

    // 计算峰值温度的四次方,用于自适应亮度。峰值温度出现在49RIn/36处
    float TPeak4 = diskA * 0.05665278;  //                                                                                          本部分在实际使用时uniform输入

    Rs         = Rs / LightYear;       // 单位是ly 本部分在实际使用时uniform输入
    float RIn  = 0.7 * RmsRatio * Rs;  // 盘内缘,正常情况下等于最内稳定圆轨
    float ROut = 12. * Rs;             // 盘外缘 本部分在实际使用时uniform输入

    float shiftMax = 1.25;  // 设定一个蓝移的亮度增加上限,以免亮部过于亮

    vec3 WorldZ               = GetCameraRot(vec4(0., 0., 1., 1.)).xyz;
    vec4 BlackHoleAPos        = vec4(5. * Rs, 0.0, 0.0, 1.0);             // 黑洞世界位置 本部分在实际使用时没有
    vec4 BlackHoleADiskNormal = vec4(normalize(vec3(0., .2, 1.0)), 1.0);  // 吸积盘世界法向 本部分在实际使用时没有
    // 以下在相机系
    vec3  BlackHoleRPos        = GetCamera(BlackHoleAPos).xyz;            //                                                                                     本部分在实际使用时uniform输入
    vec3  BlackHoleRDiskNormal = GetCameraRot(BlackHoleADiskNormal).xyz;  //                                                                          本部分在实际使用时uniform输入
    vec3  RayDir               = FragUvToDir(FragUv + 0.5 * vec2(RandomStep(FragUv, fract(iTime * 1.0 + 0.5)), RandomStep(FragUv, fract(iTime * 1.0))) / iResolution.xy, Fov);
    vec3  RayPos               = vec3(0.0, 0.0, 0.0);
    vec3  LastRayPos;
    vec3  LastRayDir;
    vec3  PosToBlackHole;
    vec3  NormalizedPosToBlackHole;
    float StepLength = 0.;
    float LastR      = length(PosToBlackHole);
    float CosTheta;
    float DeltaTheta;
    float DeltaPhiRate;
    float DeltaL;
    float DistanceToBlackHole;
    bool  flag  = true;
    int   Count = 0;
    while (flag == true)
    {  // 测地raymarching

        PosToBlackHole           = RayPos - BlackHoleRPos;
        DistanceToBlackHole      = length(PosToBlackHole);
        NormalizedPosToBlackHole = PosToBlackHole / DistanceToBlackHole;

        if (DistanceToBlackHole > (2.5 * ROut) && DistanceToBlackHole > LastR && Count > 50)
        {  // 远离黑洞
            flag   = false;
            FragUv = DirToFragUv(RayDir);
            // fragColor+=0.5*texelFetch(iChannel1, ivec2(vec2(fract(FragUv.x),fract(FragUv.y))*iChannelResolution[1].xy), 0
            // )*(1.0-fragColor.a); fragColor+=vec4(.25)*(1.0-fragColor.a);
        }
        if (DistanceToBlackHole < 0.1 * Rs)
        {  // 命中奇点
            flag = false;
            // fragColor+=vec4(0.,1.,1.,1.)*(1.0-fragColor.a);
        }
        if (flag == true)
        {
            fragColor = DiskColor(fragColor, TimeRate, StepLength, RayPos, LastRayPos, RayDir, LastRayDir, WorldZ, BlackHoleRPos, BlackHoleRDiskNormal, Rs, RIn, ROut, diskA, TPeak4, shiftMax);  // 吸积盘颜色
        }

        if (fragColor.a > 0.99)
        {  // 被完全遮挡
            flag = false;
        }
        LastRayPos   = RayPos;
        LastRayDir   = RayDir;
        LastR        = DistanceToBlackHole;
        CosTheta     = length(cross(NormalizedPosToBlackHole, RayDir));                           // 前进方向与切向夹角
        DeltaPhiRate = -1.0 * CosTheta * CosTheta * CosTheta * (1.5 * Rs / DistanceToBlackHole);  // 单位长度光偏折角
        if (Count == 0)
        {
            DeltaL = RandomStep(FragUv, fract(iTime * 1.0));  // 光起步步长抖动
        }
        else
        {
            DeltaL = 1.0;
        }

        DeltaL *= 0.15 + 0.25 * min(max(0., 0.5 * (0.5 * DistanceToBlackHole / max(10. * Rs, ROut) - 1.)), 1.);

        if ((DistanceToBlackHole) >= 2.0 * ROut)
        {  // 在吸积盘附近缩短步长。步长作为位置的函数必须连续,最好高阶可导,不然会造成光线上步前缘与下步后缘不重合,产生条纹
            DeltaL *= DistanceToBlackHole;
        }
        else if ((DistanceToBlackHole) >= 1.0 * ROut)
        {
            DeltaL *= (max(abs(dot(BlackHoleRDiskNormal, PosToBlackHole)), Rs) * (2.0 * ROut - DistanceToBlackHole) + DistanceToBlackHole * (DistanceToBlackHole - ROut)) / ROut;
        }
        else if ((DistanceToBlackHole) >= RIn)
        {
            DeltaL *= max(abs(dot(BlackHoleRDiskNormal, PosToBlackHole)), Rs);
        }
        else if ((DistanceToBlackHole) > 2. * Rs)
        {
            DeltaL *= (max(abs(dot(BlackHoleRDiskNormal, PosToBlackHole)), Rs) * (DistanceToBlackHole - 2.0 * Rs) + DistanceToBlackHole * (RIn - DistanceToBlackHole)) / (RIn - 2.0 * Rs);
        }
        else
        {
            DeltaL *= DistanceToBlackHole;
        }

        RayPos += RayDir * DeltaL;
        DeltaTheta = DeltaL / DistanceToBlackHole * DeltaPhiRate;
        RayDir     = normalize(RayDir + (DeltaTheta + DeltaTheta * DeltaTheta * DeltaTheta / 3.0) * cross(cross(RayDir, NormalizedPosToBlackHole), RayDir) / CosTheta);  // 更新方向，里面的（dthe +DeltaTheta^3/3）是tan（dthe）
        StepLength = length(RayPos - LastRayPos);

        Count++;
    }
    // 为了套bloom先逆处理一遍
    float colorRFactor = fragColor.r / fragColor.g;
    float colorBFactor = fragColor.b / fragColor.g;

    float bloomMax = 12.0;
    fragColor.r    = min(-4.0 * log(1. - pow(fragColor.r, 2.2)), bloomMax * colorRFactor);
    fragColor.g    = min(-4.0 * log(1. - pow(fragColor.g, 2.2)), bloomMax);
    fragColor.b    = min(-4.0 * log(1. - pow(fragColor.b, 2.2)), bloomMax * colorBFactor);
    fragColor.a    = min(-4.0 * log(1. - pow(fragColor.a, 2.2)), 4.0);

    // TAA

    float blendWeight = 1.0 - pow(0.5, (iTimeDelta) / max(min((0.131 * 36.0 / (TimeRate) * (GetKeplerianAngularVelocity(3. * 0.00000465, 0.00000465)) / (GetKeplerianAngularVelocity(3. * Rs, Rs))), 0.3),
                                                          0.02));  // 本部分在实际使用时max(min((0.131*36.0/(TimeRate)*(omega(3.*0.00000465,0.00000465))/(omega(3.*Rs,Rs))),0.3),0.02)由uniform输入
    blendWeight       = (iFrame < 2 || iMouse.z > 0.0) ? 1.0 : blendWeight;

    vec4 previousColor = texelFetch(iChannel3, ivec2(fragCoord), 0);                     // 获取前一帧的颜色
    fragColor          = (blendWeight)*fragColor + (1.0 - blendWeight) * previousColor;  // 混合当前帧和前一帧

    // FragUv=DirToFragUv();

    // fragColor=texelFetch(iChannel1, ivec2(FragUv*iChannelResolution[1].xy), 0 );
    // fragColor=vec4(0.1*log(fragColor.r+1.),0.1*log(fragColor.g+1.),0.1*log(fragColor.b+1.),0.1*log(fragColor.a+1.));
}